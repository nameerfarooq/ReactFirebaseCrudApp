{"version":3,"sources":["components/Alert.js","components/Contact.js","firebase.js","components/ContactForm.js","components/MainStructure.js","App.js","reportWebVitals.js","index.js"],"names":["BasicAlert","props","useState","backgroundColor","zIndex","position","color","Style","setStyle","useEffect","AlertType","className","role","style","AlertMessage","Contact","name","email","phone","address","Data","setData","uniqueID","setuniqueID","updatedValues","setupdatedValues","handleUpdateChange","e","Updatedname","target","UpdatedValue","value","red","green","innerAlert","setinnerAlert","db","getDatabase","DataRef","ref","onValue","snapshot","data","val","React","open","setOpen","handleClose","updateTheData","a","length","setTimeout","FireFinalUpdate","dontupdateTheData","updateValues","console","log","UpdateData","id","set","then","catch","error","deleteData","Object","keys","map","element","ButtonGroup","disableElevation","variant","Button","disabled","onClick","Dialog","sx","onClose","DialogTitle","DialogContent","DialogContentText","TextField","onChange","autoFocus","margin","label","type","fullWidth","placeholder","DialogActions","firebase","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","ContactForm","handleChange","event","PostData","setAlert","fetch","method","headers","body","JSON","stringify","action","MainStructure","AlertStatus","AlertState","setAlertState","message","App","document","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iTAEe,SAASA,EAAWC,GACjC,MAA0BC,mBAAS,CACjCC,gBAAkB,QAClBC,OAAS,IACTC,SAAW,QACXC,MAAM,qBAJR,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAbAC,qBAAU,WACa,WAAlBR,EAAMS,UACPF,EAAS,2BACJD,GADG,IACGJ,gBAAgB,aAED,YAAlBF,EAAMS,WACZF,EAAS,2BACLD,GADI,IACGJ,gBAAgB,eAK9B,IAED,mCACA,qBAAKQ,UAAS,sBAAiBV,EAAMS,WAAaE,KAAK,QAAQC,MAAQN,EAAvE,SACGN,EAAMa,iB,0DCZE,SAASC,IAKpB,MAAwBb,mBAAS,CAC7B,MAAS,CACLc,KAAM,cACNC,MAAO,cACPC,MAAO,cACPC,QAAS,iBALjB,mBAAOC,EAAP,KAAaC,EAAb,KAUA,EAAgCnB,mBAAS,SAAzC,mBAAOoB,EAAP,KAAiBC,EAAjB,KAIA,EAA0CrB,mBAAS,CAC/Cc,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,QAAS,KAJb,mBAAOK,EAAP,KAAsBC,EAAtB,KAMMC,EAAqB,SAACC,GACxB,IAAIC,EAAcD,EAAEE,OAAOb,KACvBc,EAAeH,EAAEE,OAAOE,MAC5BN,EAAiB,2BAAKD,GAAN,kBAAsBI,EAAcE,MAMxD,EAAoC5B,mBAAS,CACzC8B,KAAK,EACLC,OAAO,IAFX,mBAAOC,EAAP,KAAmBC,EAAnB,KAQA1B,qBAAU,WACN,IAAM2B,EAAKC,cACLC,EAAUC,YAAIH,EAAI,sBACxBI,YAAQF,GAAS,SAACG,GACd,IAAMC,EAAOD,EAASE,MAGlBtB,EAFAqB,GAKQ,CACJ,MAAS,CACL1B,KAAM,cACNC,MAAO,cACPC,MAAO,cACPC,QAAS,sBAM1B,IAKH,MAAwByB,IAAM1C,UAAS,GAAvC,mBAAO2C,EAAP,KAAaC,EAAb,KAMMC,EAAc,WAChBD,GAAQ,IAGNE,EAAa,uCAAG,sBAAAC,EAAA,sDACdzB,EAAcR,KAAKkC,OAAS,GAAK1B,EAAcP,MAAMiC,OAAS,GAAK1B,EAAcN,MAAMgC,OAAS,GAAK1B,EAAcL,QAAQ+B,OAAS,GACpIf,EAAc,CACVH,KAAK,IAETmB,YAAW,WACPhB,EAAc,CACVH,KAAK,MAGV,OAIHoB,IACAjB,EAAc,CACVF,OAAO,IAGXkB,YAAW,WACPhB,EAAc,CACVF,OAAO,MAGZ,KAEHc,KA1Bc,2CAAH,qDAgCbM,EAAoB,WACtB5B,EAAiB,CACbT,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,QAAS,KAEb4B,KAGEO,EAAe,WACjBC,QAAQC,IAAI,YACZD,QAAQC,IAAI,WAAYlC,GAnDxBwB,GAAQ,IAuDNW,EAAU,uCAAG,WAAO9B,GAAP,SAAAsB,EAAA,sEAETK,IAFS,OAIf/B,EAAYI,EAAEE,OAAO6B,IACrBH,QAAQC,IAAI,kBAAmBlC,GALhB,2CAAH,sDAWV8B,EAAe,uCAAG,4BAAAH,EAAA,6DAGdb,EAAKC,cAHS,SAIdsB,YAAIpB,YAAIH,EAAD,4BAA0Bd,IACnCE,GACCoC,MAAK,eAGLC,OAAM,SAACC,GACJ,OAEIP,QAAQC,IAAIM,MAZJ,OAepBrC,EAAiB,CACbT,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,QAAS,KAnBO,2CAAH,qDAwBf4C,EAAU,uCAAG,WAAOpC,GAAP,iBAAAsB,EAAA,6DACTS,EAAK/B,EAAEE,OAAO6B,GACdtB,EAAKC,cAFI,SAGTsB,YAAIpB,YAAIH,EAAD,4BAA0BsB,IACnC,MACCE,MAAK,eAGLC,OAAM,SAACC,GACJ,OAEIP,QAAQC,IAAIM,MAXT,2CAAH,sDAiBhB,OAEI,sBAAKnD,UAAU,UAAf,UACI,sBAAKA,UAAU,oBAAf,UAEI,qBAAKA,UAAU,WAAf,SACI,mBAAGA,UAAU,UAAb,oBAIJ,qBAAKA,UAAU,WAAf,SACI,mBAAGA,UAAU,UAAb,qBAIJ,qBAAKA,UAAU,WAAf,SACI,mBAAGA,UAAU,UAAb,qBAIJ,qBAAKA,UAAU,WAAf,SACI,mBAAGA,UAAU,UAAb,0BAMPqD,OAAOC,KAAK7C,GAAM8C,KAAI,SAACC,GAEpB,OACI,sBAAmBxD,UAAU,cAA7B,UACI,qBAAKA,UAAU,WAAf,SACI,4BACKS,EAAK+C,GAASnD,SAIvB,qBAAKL,UAAU,WAAf,SACI,4BACKS,EAAK+C,GAASlD,UAIvB,qBAAKN,UAAU,WAAf,SACI,4BACKS,EAAK+C,GAASjD,UAIvB,sBAAKP,UAAU,WAAWE,MAAO,CAAEP,MAAO,oBAA1C,UAEI,eAAC8D,EAAA,EAAD,CAAaC,kBAAgB,EAACC,QAAQ,YAAtC,UACI,cAACC,EAAA,EAAD,CAAQ5D,UAAU,WAAW6D,SAAkC,gBAAxBpD,EAAK+C,GAASlD,MAAyByC,GAAIS,EAASM,QAAShB,EAApG,kBACA,cAACc,EAAA,EAAD,CAAQ5D,UAAU,WAAW6D,SAAkC,gBAAxBpD,EAAK+C,GAASlD,MAAyByC,GAAIS,EAASM,QAASV,EAApG,uBAEJ,eAACW,EAAA,EAAD,CAAQC,GAAI,CAAErE,MAAO,oBAAsBuC,KAAMA,EAAM+B,QAAS7B,EAAhE,UACKb,EAAWF,KAAO,cAAChC,EAAD,CAAYU,UAAU,SAASI,aAAa,6BAC/D,cAAC+D,EAAA,EAAD,CAAaF,GAAI,CAAErE,MAAO,oBAA1B,6BACA,eAACwE,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAmBJ,GAAI,CAAErE,MAAO,oBAAhC,8DAGA,cAAC0E,EAAA,EAAD,CACIL,GAAI,CACArE,MAAO,QAAS,wBAAyB,CAAEA,MAAO,oBAClD,oBAAqB,CAAEA,MAAO,qBAElCU,KAAK,OACLe,MAAOP,EAAcR,KACrBiE,SAAUvD,EACVwD,WAAS,EACTC,OAAO,QACPzB,GAAG,OACH0B,MAAM,OACNC,KAAK,OACLC,WAAS,EACThB,QAAQ,WACRiB,YAAY,oBAIhB,cAACP,EAAA,EAAD,CACIL,GAAI,CACArE,MAAO,QAAS,wBAAyB,CAAEA,MAAO,oBAClD,oBAAqB,CAAEA,MAAO,qBAElCU,KAAK,QACLe,MAAOP,EAAcP,MACrBgE,SAAUvD,EACVwD,WAAS,EACTC,OAAO,QACPzB,GAAG,OACH0B,MAAM,gBACNC,KAAK,QACLC,WAAS,EACThB,QAAQ,WACRiB,YAAY,qBAEhB,cAACP,EAAA,EAAD,CACIL,GAAI,CACArE,MAAO,QAAS,wBAAyB,CAAEA,MAAO,oBAClD,oBAAqB,CAAEA,MAAO,qBAElCU,KAAK,QACLe,MAAOP,EAAcN,MACrB+D,SAAUvD,EACVwD,WAAS,EACTC,OAAO,QACPzB,GAAG,OACH0B,MAAM,QACNC,KAAK,MACLC,WAAS,EACThB,QAAQ,WACRiB,YAAY,qBAEhB,cAACP,EAAA,EAAD,CACIL,GAAI,CACArE,MAAO,QAAS,wBAAyB,CAAEA,MAAO,oBAClD,oBAAqB,CAAEA,MAAO,qBAElCU,KAAK,UACLe,MAAOP,EAAcL,QACrB8D,SAAUvD,EACVwD,WAAS,EACTC,OAAO,QACPzB,GAAG,OACH0B,MAAM,UACNC,KAAK,OACLC,WAAS,EACThB,QAAQ,WACRiB,YAAY,0BAGpB,eAACC,EAAA,EAAD,WACI,cAACjB,EAAA,EAAD,CAAQI,GAAI,CAAErE,MAAO,mBAAoBH,gBAAiB,WAAasE,QAASzB,EAAhF,oBACA,cAACuB,EAAA,EAAD,CAAQI,GAAI,CAAErE,MAAO,mBAAoBH,gBAAiB,WAAasE,QAASpB,EAAhF,+BAzGNc,S,aCjNfsB,EAXM,CACjBC,OAAQ,0CACRC,WAAY,0CACZC,UAAW,0BACXC,cAAe,sCACfC,kBAAmB,gBACnBC,MAAO,+CCEI,SAASC,EAAY/F,GAEhC,MAAwBC,mBAAS,CAC7Bc,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,QAAS,KAJb,mBAAOC,EAAP,KAAaC,EAAb,KA6BM4E,EAAe,SAACC,GAClB,IAAIlF,EAAOkF,EAAMrE,OAAOb,KACpBe,EAAQmE,EAAMrE,OAAOE,MACzBV,EAAQ,2BACDD,GADA,kBACOJ,EAAOe,MAGnBoE,EAAQ,uCAAG,kCAAAlD,EAAA,yDAEPjC,EAAgCI,EAAhCJ,KAAMC,EAA0BG,EAA1BH,MAAOC,EAAmBE,EAAnBF,MAAOC,EAAYC,EAAZD,QACrBH,EAAKkC,QAAWjC,EAAMiC,QAAWhC,EAAMgC,QAAW/B,EAAQ+B,OAHlD,gBAITjD,EAAMmG,SAAS,SAAU,sCAJhB,uCAWOC,MAAM,qFAClB,CACIC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjB1F,OACAC,QACAC,QACAC,cArBH,cA0BTlB,EAAMmG,SAAS,UAAW,wCAC1B/E,EAAQ,CACJL,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,QAAS,KA/BJ,4CAAH,qDAoCd,OACI,qBAAKR,UAAU,eAAf,SACI,uBAAMgG,OAAO,OAAb,UACI,qBAAKhG,UAAU,MAAf,SACI,cAACqE,EAAA,EAAD,CAAWK,KAAK,OAAO3B,GAAG,iBAAiB3B,MAAOX,EAAKJ,KAAMA,KAAK,OAAOiE,SAAUgB,EAActF,UAAU,aAAayE,MAAM,OAAOd,QAAQ,eAEjJ,sBAAK3D,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACI,cAACqE,EAAA,EAAD,CAAWK,KAAK,QAAQ3B,GAAG,iBAAiB3B,MAAOX,EAAKH,MAAOD,KAAK,QAAQiE,SAAUgB,EAActF,UAAU,aAAayE,MAAM,QAAQd,QAAQ,eAErJ,qBAAK3D,UAAU,WAAf,SACI,cAACqE,EAAA,EAAD,CAAWK,KAAK,MAAM3B,GAAG,iBAAiB3B,MAAOX,EAAKF,MAAOF,KAAK,QAAQiE,SAAUgB,EAActF,UAAU,aAAayE,MAAM,QAAQd,QAAQ,kBAGvJ,qBAAK3D,UAAU,MAAf,SACI,cAACqE,EAAA,EAAD,CAAWK,KAAK,OAAO3B,GAAG,iBAAiB3B,MAAOX,EAAKD,QAASH,KAAK,UAAUiE,SAAUgB,EAActF,UAAU,aAAayE,MAAM,UAAUd,QAAQ,eAE1J,cAACC,EAAA,EAAD,CAAQe,WAAS,EAAC3E,UAAU,YAAY8D,QAAS0B,EAAU7B,QAAQ,YAAnE,yB,OC/FD,SAASsC,IACpB,MAAoC1G,mBAAS,CACzC2G,aAAc,EACdnG,UAAY,GACZI,aAAe,KAHnB,mBAAOgG,EAAP,KAAmBC,EAAnB,KAoBA,OACI,8BACI,sBAAKpG,UAAU,6BAAf,UACI,sBAAKA,UAAU,MAAf,UACI,oBAAIA,UAAU,UAAd,0BACCmG,EAAWD,aAAe,cAAC7G,EAAD,CAAYU,UAAWoG,EAAWpG,UAAWI,aAAcgG,EAAWhG,kBAErG,sBAAKH,UAAU,MAAf,UACI,qBAAKA,UAAU,YAAf,SACI,cAAC,EAAD,CAAayF,SAxBlB,SAACf,EAAK2B,GAEjBD,EAAc,CACVF,aAAc,EACdnG,UAAY2E,EAChBvE,aAAekG,IAGf7D,YAAW,WACP4D,EAAc,CACdF,aAAc,MAGf,UAaS,qBAAKlG,UAAU,YAAf,SACI,cAAC,EAAD,cC1BTsG,MAVf,WAEE,OADAC,SAASV,KAAK3F,MAAMV,gBAAkB,QAEpC,qBAAKQ,UAAU,MAAf,SACE,cAAC,EAAD,OCMSwG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzD,MAAK,YAAkD,IAA/C0D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFX,SAASY,eAAe,SAM1BX,K","file":"static/js/main.18d1a697.chunk.js","sourcesContent":["import React ,{useState, useEffect} from 'react';\r\n\r\nexport default function BasicAlert(props) {\r\n  const [Style, setStyle] = useState({\r\n    backgroundColor : \"white\",\r\n    zIndex : \"1\",\r\n    position : \"fixed\",\r\n    color:\"black !important\"\r\n  })\r\n  useEffect(() => {\r\n    if(props.AlertType===\"danger\"){\r\n      setStyle({\r\n        ...Style,backgroundColor:\"#E74C3C\"\r\n      })}\r\n      else if(props.AlertType===\"success\"){\r\n        setStyle({\r\n         ...Style, backgroundColor:\"#2ECC71\"\r\n        })\r\n      }\r\n    \r\n    // eslint-disable-next-line \r\n  }, [])\r\n  return (\r\n    <>\r\n    <div className={`alert alert-${props.AlertType}`} role=\"alert\" style={ Style}>\r\n      {props.AlertMessage}\r\n    </div>\r\n    </>\r\n  );\r\n}","import React, { useState, useEffect } from 'react'\r\nimport './Contact.css'\r\nimport { getDatabase, ref, onValue, set } from \"firebase/database\";\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport Button from '@mui/material/Button';\r\nimport BasicAlert from './Alert'\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n// import firedb from '../firebase'\r\nexport default function Contact() {\r\n\r\n\r\n\r\n\r\n    const [Data, setData] = useState({\r\n        'hello': {\r\n            name: \"field empty\",\r\n            email: \"field empty\",\r\n            phone: \"field empty\",\r\n            address: \"field empty\"\r\n        }\r\n    })\r\n\r\n\r\n    const [uniqueID, setuniqueID] = useState('hello')\r\n\r\n\r\n\r\n    const [updatedValues, setupdatedValues] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        address: \"\"\r\n    })\r\n    const handleUpdateChange = (e) => {\r\n        let Updatedname = e.target.name;\r\n        let UpdatedValue = e.target.value;\r\n        setupdatedValues({ ...updatedValues, [Updatedname]: UpdatedValue })\r\n\r\n\r\n    }\r\n\r\n\r\n    const [innerAlert, setinnerAlert] = useState({\r\n        red: false,\r\n        green: false\r\n    })\r\n\r\n\r\n\r\n    // eslint-disable-next-line\r\n    useEffect(() => {\r\n        const db = getDatabase();\r\n        const DataRef = ref(db, 'ReactFirebaseCRUD/');\r\n        onValue(DataRef, (snapshot) => {\r\n            const data = snapshot.val();\r\n            if (data) {\r\n\r\n                setData(data)\r\n            }\r\n            else {\r\n                setData({\r\n                    'hello': {\r\n                        name: \"field empty\",\r\n                        email: \"field empty\",\r\n                        phone: \"field empty\",\r\n                        address: \"field empty\"\r\n                    }\r\n                })\r\n            }\r\n        });\r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const updateTheData = async () => {\r\n        if (updatedValues.name.length < 2 || updatedValues.email.length < 2 || updatedValues.phone.length < 2 || updatedValues.address.length < 2) {\r\n            setinnerAlert({\r\n                red: true\r\n            })\r\n            setTimeout(() => {\r\n                setinnerAlert({\r\n                    red: false\r\n                })\r\n\r\n            }, 1000);\r\n        }\r\n        else {\r\n\r\n            FireFinalUpdate()\r\n            setinnerAlert({\r\n                green: true\r\n            })\r\n\r\n            setTimeout(() => {\r\n                setinnerAlert({\r\n                    green: false\r\n                })\r\n\r\n            }, 500);\r\n\r\n            handleClose()\r\n\r\n\r\n        }\r\n\r\n    }\r\n    const dontupdateTheData = () => {\r\n        setupdatedValues({\r\n            name: \"\",\r\n            email: \"\",\r\n            phone: \"\",\r\n            address: \"\"\r\n        })\r\n        handleClose()\r\n    }\r\n\r\n    const updateValues = () => {\r\n        console.log(\"uniqueID\")\r\n        console.log(\"uniqueID\", uniqueID)\r\n\r\n        handleClickOpen()\r\n    }\r\n    const UpdateData = async (e) => {\r\n\r\n        await updateValues()\r\n\r\n        setuniqueID(e.target.id)\r\n        console.log(\"yeh agaya id = \", uniqueID)\r\n\r\n    }\r\n\r\n\r\n\r\n    const FireFinalUpdate = async () => {\r\n\r\n\r\n        const db = getDatabase();\r\n        await set(ref(db, `ReactFirebaseCRUD/${uniqueID}`),\r\n            updatedValues)\r\n            .then(() => {\r\n                // Data saved successfully!\r\n            })\r\n            .catch((error) => {\r\n                return (\r\n\r\n                    console.log(error)\r\n                )\r\n            });\r\n        setupdatedValues({\r\n            name: \"\",\r\n            email: \"\",\r\n            phone: \"\",\r\n            address: \"\"\r\n        })\r\n    }\r\n\r\n\r\n    const deleteData = async (e) => {\r\n        const id = e.target.id\r\n        const db = getDatabase();\r\n        await set(ref(db, `ReactFirebaseCRUD/${id}`),\r\n            null)\r\n            .then(() => {\r\n                // Data saved successfully!\r\n            })\r\n            .catch((error) => {\r\n                return (\r\n\r\n                    console.log(error)\r\n                )\r\n            });\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"Outter2\">\r\n            <div className=\"row headerContact\">\r\n\r\n                <div className=\"col-lg-3\">\r\n                    <b className=\"headers\">\r\n                        Name\r\n                    </b>\r\n                </div>\r\n                <div className=\"col-lg-3\">\r\n                    <b className=\"headers\">\r\n                        Email\r\n                    </b>\r\n                </div>\r\n                <div className=\"col-lg-3\">\r\n                    <b className=\"headers\">\r\n                        Phone\r\n                    </b>\r\n                </div>\r\n                <div className=\"col-lg-3\">\r\n                    <b className=\"headers\">\r\n                        Actions\r\n                    </b>\r\n                </div>\r\n\r\n            </div>\r\n            {Object.keys(Data).map((element) => {\r\n\r\n                return (\r\n                    <div key={element} className=\"row DataRow\">\r\n                        <div className=\"col-lg-3\">\r\n                            <p>\r\n                                {Data[element].name}\r\n                                {/* // muhammad nameer */}\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"col-lg-3\">\r\n                            <p>\r\n                                {Data[element].email}\r\n                                {/* // nameerfarooq18@gmail.com */}\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"col-lg-3\">\r\n                            <p>\r\n                                {Data[element].phone}\r\n                                {/* {console.log(\"element\",element)} */}\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"col-lg-3\" style={{ color: \"black !important\" }} >\r\n\r\n                            <ButtonGroup disableElevation variant=\"contained\">\r\n                                <Button className=\"disabled\" disabled={Data[element].email === \"field empty\"} id={element} onClick={UpdateData} >edit</Button>\r\n                                <Button className=\"disabled\" disabled={Data[element].email === \"field empty\"} id={element} onClick={deleteData}>delete</Button>\r\n                            </ButtonGroup>\r\n                            <Dialog sx={{ color: 'black !important' }} open={open} onClose={handleClose}>\r\n                                {innerAlert.red && <BasicAlert AlertType=\"danger\" AlertMessage=\"fill all field correctly\" />}\r\n                                <DialogTitle sx={{ color: 'black !important' }} >Updating Values</DialogTitle>\r\n                                <DialogContent>\r\n                                    <DialogContentText sx={{ color: 'black !important' }}>\r\n                                        To edit the record please enter new values below\r\n                                    </DialogContentText>\r\n                                    <TextField\r\n                                        sx={{\r\n                                            color: 'black', '& .MuiInputLabel-root': { color: \"black !important\" },\r\n                                            '& .MuiInput-input': { color: \"black !important\" }\r\n                                        }}\r\n                                        name=\"name\"\r\n                                        value={updatedValues.name}\r\n                                        onChange={handleUpdateChange}\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        id=\"name\"\r\n                                        label=\"Name\"\r\n                                        type=\"text\"\r\n                                        fullWidth\r\n                                        variant=\"standard\"\r\n                                        placeholder=\"enter your name\"\r\n\r\n\r\n                                    />\r\n                                    <TextField\r\n                                        sx={{\r\n                                            color: 'black', '& .MuiInputLabel-root': { color: \"black !important\" },\r\n                                            '& .MuiInput-input': { color: \"black !important\" }\r\n                                        }}\r\n                                        name=\"email\"\r\n                                        value={updatedValues.email}\r\n                                        onChange={handleUpdateChange}\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        id=\"name\"\r\n                                        label=\"Email Address\"\r\n                                        type=\"email\"\r\n                                        fullWidth\r\n                                        variant=\"standard\"\r\n                                        placeholder=\"enter your email\"\r\n                                    />\r\n                                    <TextField\r\n                                        sx={{\r\n                                            color: 'black', '& .MuiInputLabel-root': { color: \"black !important\" },\r\n                                            '& .MuiInput-input': { color: \"black !important\" }\r\n                                        }}\r\n                                        name=\"phone\"\r\n                                        value={updatedValues.phone}\r\n                                        onChange={handleUpdateChange}\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        id=\"name\"\r\n                                        label=\"Phone\"\r\n                                        type=\"tel\"\r\n                                        fullWidth\r\n                                        variant=\"standard\"\r\n                                        placeholder=\"enter your phone\"\r\n                                    />\r\n                                    <TextField\r\n                                        sx={{\r\n                                            color: 'black', '& .MuiInputLabel-root': { color: \"black !important\" },\r\n                                            '& .MuiInput-input': { color: \"black !important\" }\r\n                                        }}\r\n                                        name=\"address\"\r\n                                        value={updatedValues.address}\r\n                                        onChange={handleUpdateChange}\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        id=\"name\"\r\n                                        label=\"Address\"\r\n                                        type=\"text\"\r\n                                        fullWidth\r\n                                        variant=\"standard\"\r\n                                        placeholder=\"enter your address\"\r\n                                    />\r\n                                </DialogContent>\r\n                                <DialogActions>\r\n                                    <Button sx={{ color: 'black !important', backgroundColor: '#0ab892' }} onClick={updateTheData}>Update</Button>\r\n                                    <Button sx={{ color: 'black !important', backgroundColor: '#ff6b6b' }} onClick={dontupdateTheData}>Cancel</Button>\r\n                                </DialogActions>\r\n                            </Dialog>\r\n                        </div>\r\n\r\n                    </div>\r\n                )\r\n            })}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import * as firebase from \"firebase/app\";\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAaboCSxy5qeC7LH6FKzN-Y7KaAc0W3X40\",\r\n    authDomain: \"reactfirebasecrud-78477.firebaseapp.com\",\r\n    projectId: \"reactfirebasecrud-78477\",\r\n    storageBucket: \"reactfirebasecrud-78477.appspot.com\",\r\n    messagingSenderId: \"1083591619157\",\r\n    appId: \"1:1083591619157:web:b51f8807dd52d40ecb5adc\"\r\n  };\r\n  \r\n  // Initialize Firebase\r\n// eslint-disable-next-line\r\n  var fireDb = firebase.initializeApp(firebaseConfig);\r\n\r\n  export default fireDb\r\n\r\n","\r\nimport React, { useState } from 'react'\r\nimport './ContactForm.css'\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\n// eslint-disable-next-line\r\nimport { firebaseDb } from '../firebase'\r\n// import { getDatabase, ref, onValue } from \"firebase/database\";\r\n\r\nexport default function ContactForm(props) {\r\n\r\n    const [Data, setData] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        address: \"\",\r\n    })\r\n    // const [FireBaseData, setFireBaseData] = useState({\r\n    //     id: \"\",\r\n    //     name: \"\",\r\n    //     email: \"\",\r\n    //     phone: \"\",\r\n    //     address: \"\"\r\n    // })\r\n    // useEffect(() => {\r\n    //     const db = getDatabase();\r\n    //     const DataRef = ref(db, 'ReactFirebaseCRUD/');\r\n    //     onValue(DataRef, (snapshot) => {\r\n    //         const data = snapshot.val();\r\n    //         console.log(\"yeh lo \",data)\r\n            \r\n    //             setFireBaseData({\r\n    //                data\r\n    //             })\r\n            \r\n    //     });\r\n\r\n    // }, [])\r\n    \r\n\r\n    const handleChange = (event) => {\r\n        let name = event.target.name;\r\n        let value = event.target.value;\r\n        setData({\r\n            ...Data, [name]: value\r\n        })\r\n    }\r\n    const PostData = async () => {\r\n\r\n        let { name, email, phone, address } = Data;\r\n        if (!name.length || !email.length || !phone.length || !address.length) {\r\n            props.setAlert('danger', 'Please fill all fields correctly !')\r\n        }\r\n        \r\n        \r\n        else {\r\n\r\n            // eslint-disable-next-line\r\n            let res = await fetch('https://reactfirebasecrud-78477-default-rtdb.firebaseio.com/ReactFirebaseCRUD.json',\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({\r\n                        name,\r\n                        email,\r\n                        phone,\r\n                        address\r\n                    })\r\n                }\r\n            )\r\n\r\n            props.setAlert('success', 'your form was submitted successfully')\r\n            setData({\r\n                name: \"\",\r\n                email: \"\",\r\n                phone: \"\",\r\n                address: \"\",\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"OuterBodyLow\">\r\n            <form action=\"POST\">\r\n                <div className=\"row\">\r\n                    <TextField type=\"text\" id=\"standard-basic\" value={Data.name} name=\"name\" onChange={handleChange} className=\"textField1\" label=\"Name\" variant=\"standard\" />\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <TextField type=\"email\" id=\"standard-basic\" value={Data.email} name=\"email\" onChange={handleChange} className=\"textField2\" label=\"Email\" variant=\"standard\" />\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                        <TextField type=\"tel\" id=\"standard-basic\" value={Data.phone} name=\"phone\" onChange={handleChange} className=\"textField3\" label=\"Phone\" variant=\"standard\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <TextField type=\"text\" id=\"standard-basic\" value={Data.address} name=\"address\" onChange={handleChange} className=\"textField4\" label=\"Address\" variant=\"standard\" />\r\n                </div>\r\n                <Button fullWidth className=\"SubmitBtn\" onClick={PostData} variant=\"contained\">Submit</Button>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React , {useState} from 'react'\r\nimport Contact from './Contact'\r\nimport ContactForm from './ContactForm'\r\nimport './MainStructure.css'\r\nimport BasicAlert from './Alert' \r\nexport default function MainStructure() {\r\n    const [AlertState, setAlertState] = useState({\r\n        AlertStatus : false,\r\n        AlertType : '',\r\n        AlertMessage : \"\"\r\n    })\r\n    const setAlert=(type,message)=>{\r\n        \r\n        setAlertState({\r\n            AlertStatus : true,\r\n            AlertType : type,\r\n        AlertMessage : message\r\n\r\n        })\r\n        setTimeout(() => {\r\n            setAlertState({\r\n            AlertStatus : false\r\n            })\r\n            \r\n        }, 1000);\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"container-fluid OuterBody \">\r\n                <div className=\"row\">\r\n                    <h1 className=\"heading\">Contact Form</h1>\r\n                    {AlertState.AlertStatus && <BasicAlert AlertType={AlertState.AlertType} AlertMessage={AlertState.AlertMessage} />}\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <ContactForm setAlert={setAlert} />\r\n                    </div>\r\n                    <div className=\"col-md-12\">\r\n                        <Contact />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {React} from 'react';\nimport MainStructure from './components/MainStructure';\nfunction App() {\n  document.body.style.backgroundColor = \"black\"\n  return (\n    <div className=\"App\">\n      <MainStructure />\n      \n          </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}